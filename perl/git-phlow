#!/usr/bin/perl
require 5.000;
use strict;
use Carp;
use Cwd;

# File version
our $VERSION    = "1.0";                             #major.minor
our $PATCH      = "1";                               #patch

use Getopt::Long;
use Pod::Usage;
use JSON::PP;

# Holds the global variables that are used to cache the value of our options
our %options;

# The white-listed phlow commands
our %valid_commands = (
  defaultbranch    => [1],
  addremove        => [1],
  mkalias          => [0],
  deliver          => [1],
  wrapup           => [1],
  workon           => [1],
  share            => [1],
  purge            => [1],
  issue            => [1],
  sync             => [1],
  web              => [1]
);

GetOptions(
  (
    "issue=s"              => \$options{issue},
    "local"                => \$options{local},
    "force"                => \$options{force},
    "number"               => \$options{number},
    "wip!"                 => \$options{wip},
    "dry"                  => \$options{dry},
    "verbose"              => \$options{verbose},
    "remote"               => \$options{remote},
    "branch"               => \$options{branch},
		"usage"                => \$options{usage},
    "man"                  => sub { pod2usage(-exitval => 0, -verbose => 2) }	)
) || pod2usage(-exitval => 1, -verbose => 0);

our $Phlowcommand = shift;

validate_context();

eval '&'.$Phlowcommand.'(@ARGV)';
if ($@){
  warn $@;
}

exit(0);

###################################################

# Below is all the POD documentation following the conventional chapters as described in (http://perldoc.perl.org/perlpod.html). The functions are implemented after the last pod chapter COMMANDS is declared. The commands have POD text, the helper functions doesn't

=pod

=head1 NAME

This script is related to "The Phlow" described in detail in L<A Praqmatic Workflow|http://www.praqma.com/stories/a-pragmatic-workflow/>

It provides the various features that are required to support all user scenarios of the Phlow.

=over

=item B<Copyright:>

Praqma, 2017, L<www.praqma.com|http://www.praqma.com>

=item B<License:>

M.I.T.

=item B<Repository:>

L<github.com/praqma/the-phlow|http://github.com/praqma/the-phlow>

=item B<Support:>

Use the L<issue system|http://github.com/praqma/the-phlow/issues> in the repo

=back

=head1 SYNOPSIS

  git phlow <command> [options] [arguments]
  git phlow --man|--usage

All options can be shortend to their shortest unambigious form and you can use one or two dashes in front of options, as your temper prefers - we don't care.

E.g. C<-u> can substitute C<--usage>.

=head1 OPTIONS

The valid phlow commands are listed below.

  phlow addremove
  phlow defaultbranch
  phlow web [[--issue] number]
  phlow mkalias [--force]
  phlow workon issue [--force]
  phlow sync [--force]
  phlow deliver [--local]
  phlow wrapup [[--force] message]
  phlow issue --branch  number | --[no]wip number | --number

The following switches are accepted by all commands:

=over

=item C<< B<--verbose> >>

List's all commands that are passed on to the shell - quite noisy, but useful if you wann learn what's happening under the hood

=item C<< B<--usage> >>

Give detailed help to each individual command.

=back

=head1 DESCRIPTION

The script is helping implementing the git gymnastics required both as an end user and on the CI servers to support "the Phlow".

The most simple use of it is to clone the repo to your PC, and then link the perl folder to a directory that is in your C<$PATH> like this:

    git clone https://github.com/Praqma/the-phlow.git
    ln -s ./the-phlow/perl ~/opt/phlow

and then add C</Users/you/opt/phlow> to your C<$PATH> in C<.zshrc> or C<.bashrc> or what ever you are using.

Hereafter you will have access to all the phlow commands like this

    git phlow addremove
    git phlow workon
    ...

You can even make the into 'native' git commands by running the commands

    git phlow mkalias

Then you will be able to execut the same commands as

    git addremove
    git workon
    ...


=head1 COMMANDS

=cut

=head2 web

    git phlow web [[--issue] number]

=over

=item C<< B< --issue number> >>

=item C<< B< number> >>

C<number> is an integer refering to a GitHub issue in the context of the current repository. The number can be omitted. It will default to the issue number of your current branch context.

Hell, even the switch can be ommitted, so you can apply the number just as an argument.

=back

Opens your current context in a web browser. If you are on an issue branch, or your apply an issue number in the switch, it take you directly to the corresponding issue on GitHub. Otherwise it will take you to the repo's web site.

=cut
sub web($) {
  my $url = 'https://github.com/';
  my $hubname = hubname();
  if (defined($hubname)){
    $url =$url.$hubname;
    my $issue;
    if($options{issue}){
      $issue = $options{issue};
    } else{
      $issue = shift;
      defined($issue) || do {
        $issue = issue_no_from_branch();
      }
    }
    if (defined($issue)){
      croak 'I want an integer!' unless ($issue =~ /^\d+$/);
      $url = $url.'/issues/'.$issue;
    }
  }
  `open $url`;
}

=head2 addremove

    git phlow addremove

Doesn't take any parametes.

It's implementing Mercurials command of the same name. It simply synchronizes your current work tree with the index; It adds the files you have added or modified and removes the files that you may removed.

=cut
sub addremove(){
	cmd(
   command => "git add -A .",
   verbose => $options{verbose} );
};

=head2 defaultbranch

    defaultbranch

Doesn't take any parametes.

Returns the default branch. This is a setting on the GitHub repository.

=cut
sub defaultbranch(){

  print get_default_branch()."\n";
}

=head2 mkalias

    git phlow mkalias [--force]

=over

=item C<< B<--force> >>

C<force> is required if an alias already exist with the same name, and the configuration to set is different to the one that there already is. In other words using C<mkalias>  I<without> force, is guaranteed to be non intrusive to your git config setup.

=back

Creates the aliases foreach phlow command. Which will enable you to use the flow commands as native git commands:

   git workon 3

Instead of the full length phlow command:

  git phlow workon 3

It will not overwrite existing aliases with clashing names unless you apply C<--force>

=cut
sub mkalias (){
  foreach my $cmd (sort keys %valid_commands){
    my $alias = "phlow $cmd";
    if ($valid_commands{$cmd}[0]){
      my $curalias = cmd(
        command => "git config --global --get alias.$cmd",
        verbose => $options{verbose},
        die_on_err => 0);
      chomp($curalias);
      my $action = ($curalias ne '')? "Overwriting" : "Creating";
      if ($curalias ne $alias){
        if ($curalias ne '' && not defined($options{force})){
          print STDERR "Not overwriting the existing alias '$cmd' unless you apply --force\n";
        } else {
          print "$action the '$cmd' alias\n";
          cmd(
            command => "git config --global --add alias.$cmd \"$alias\"",
            verbose => $options{verbose});
        }
      } else{
        print "The alias '$cmd' is already set correct\n";
      }
    }
  }
}

=head2 sync

    git phlow sync [--force]

=over

=item C<< B<--force> >>

C<force> is reqiured if the rebase is causing a merge conflict to managed manually. In other words using C<sync> I<without> force is guaranteed to either synchronize yor branch successfully - or do nothing.

=back

Sync operates in the context of the currently checked out branch.

Sync will rebase against the branch your are tracking remotely, if's guranteed to be safe. If fast-forwards if it can, if a merge is needed, then it will dry-run it and see if can be done without merge conflicts.

If a mege conflict is unavoidable you will be warned.

If you run with C<--force> it will continue into the rebase, even if causes a conflict - and you will have to resolve it yourself.

But in short - C<sync> is guarantted to be safe as long as you don't use the C<--force> switch.

=cut
sub sync(){
  my $remote_branch =cmd(
    command => 'git rev-parse --abbrev-ref --symbolic-full-name @{u}',
    verbose => $options{verbose} );
  chomp($remote_branch);
  my $remote = remote();
  my $status = cmd(
   command => "git status --short --branch --porcelain",
   verbose => $options{verbose} );

  fetch();

  if ($status =~ /\[.*behind.*\]/){
    print "Your branch is behind '$remote_branch'\n";
    if ($status =~ /\[.*ahead.*\]/){
      print "...and behold! you branch is also ahead of '$remote_branch'\n";
      my $mergestatus_txt = cmd(
        command => "git format-patch $remote_branch --stdout \| git apply --check",
        verbose => $options{verbose},
        die_on_err => 0,
        merge_errout => 1);

      my $conflict = ($mergestatus_txt =~ /.*patch failed.*/)? 1:0;

      if ($conflict){
        print "You have a merge conflict coming up:\n";
        $mergestatus_txt =~ s/error:/  /g;
        print grep /.*patch failed.*/, split /\n/, $mergestatus_txt;
        print "\n";

        if (not defined($options{force})){
          print STDERR "Run again with '--force' if you're up for the rebase\n";
          exit 1;
        }
      }else {
        print "Luckily the merge is clean as a whistle...\n";
      }
      print cmd(
        command => "git rebase --preserve-merges $remote_branch",
        verboseq => $options{verbose},
        die_on_err => 0 );
    } else{
        print "Fast-forwarding\n";
        print &cmd (
          command => "git merge --ff-only $remote_branch",
          verbose => $options{verbose} );
    }
  } else{
    print "Everything is up-to-date\n";
  }
};

=head2 purge

=cut

sub purge(){
  fetch( purge => 1,
    prune => 1,
    die_on_err => 0,
    remote => defined($options{remote}),
    local => defined($options{local}),
    prefix => ['shared', 'delivered', remote().'/ready'],
    dry => defined($options{dry})
    );
}

=head2 workon

    workon issue [--force]

=over

=item C<< B<--force> >>

Will force a rebase even if it leads to a merge conflict. It's teh same I<force> as describe in C<git phlow sync>.

=back


Takes an integer as argument - refering to the issue numner on GitHub issues. It will create a working branch for that issue and check it out.

If a reusable branch exist then it will rename it, check it out and synchronize it. Reusabel branches are any of the following

=over

=item

C<< <issue_branch_name> >>

=item

C<< shared/<issue_branch_name> >>

=item

C<< delivered/<issue_branch_name> >>

=back

If more reusable brances exists, then C<--force> is required, for anything to happen. The branch to reuse is the first one found in the order listed above.

C<workon> can be used to all swapping to and from ongoing work - even work that is shared (parked) or work that is already delivered and needs to be reobtrained.

If a reusable branch is found, then it is synced with is't remote (see C<gitp hlow sync>). The synce is guaranteed to on be carreid out if it's free of merge conflicts. To continue into the merge conflict, C<--force> is required.

=cut
sub workon ($){
  my $issue = shift;
  croak 'I want an integer!' unless ($issue =~ /^\d+$/);
  croak "There's only room for one argument" if defined(shift);

  fetch();

  my $branchname = issue_branch_name( $issue);
  my $shared_branchname = 'shared/'.$branchname;
  my $remote_shared_branchname = remote().'/shared/'.$branchname;
  my $delivered_branchname = 'delivered/'.$branchname;

  # Get a list of branches that can be reused
  my @branches = cmd( command => "git branch --list -a $branchname $shared_branchname $delivered_branchname $remote_shared_branchname",
    verbose => $options{verbose},
    die_on_err => 0,
    return_array => 1);

  # If there are any reusable branches we need to chomp and clean up output from the git command and turn it into a map
  if (@branches){
    my %branchmap;
    foreach my $existb (@branches){
      $existb =~ s/^\**\s*//;
      $existb =~ s/^remotes\///;
      chomp($existb);
      $branchmap{$existb} = '';
    }

    # If both local and remote shared branchname is represented - disregard the remote - we'll use the local one
    if(defined($branchmap{$remote_shared_branchname})
      && defined($branchmap{$shared_branchname})){
      delete $branchmap{$remote_shared_branchname} ;
    }

    # If there are more then one potentially reusable branch then we need to correct or verify the assumption made above.
    if (scalar keys %branchmap >1 && not $options{force}){
      print "Hmm - seems like you have too many branches related to issue '$issue' hanging around:\n\n";
      foreach (sort keys %branchmap){
        print  "  $_\n";
      }
      print "\nCome on Highlander! - There can be only one! Either clean up a little or run again with '--force'\n";
      exit 1;
    }

    if(defined($branchmap{$remote_shared_branchname})
      && not defined($branchmap{$shared_branchname})
      && not defined($branchmap{$delivered_branchname})
      && not defined($branchmap{$branchname})){
      print "Found $remote_shared_branchname - mapping it to local $shared_branchname\n";
      cmd ( command => "git branch $shared_branchname ".remote()."/$shared_branchname",
        verbose => $options{verbose});
      delete $branchmap{$remote_shared_branchname};
      $branchmap{$shared_branchname} = '';
    }

    my $reuse_branch = (defined($branchmap{$branchname}))?
      $branchname :
      (defined($branchmap{$shared_branchname}))?
        $shared_branchname :
        (defined($branchmap{$delivered_branchname}))?
        $delivered_branchname :
        undef;

    croak "What the F%&€K! I would expect to have pointed out a reusable branch at this point" unless defined($reuse_branch);

    unless ($branchname eq $reuse_branch){
      print "Reusing branch '$reuse_branch'\n";
      cmd ( command => "git branch -M $reuse_branch $branchname",
        verbose => $options{verbose} );
    };

    cmd (
      command => "git checkout $branchname",
      verbose => $options{verbose} );

    sync();

    if ($reuse_branch eq $shared_branchname){
      cmd ( command => "git branch --set-upstream-to ".remote()."/".get_default_branch(),
        verbose => $options{verbose})
    }


  }
  else { # no branches to reuse - let's create it
    fetch();
    cmd ( command => "git checkout -b $branchname ".remote().'/'.get_default_branch(),
      verbose => $options{verbose})
  };
}

=head2 deliver

=cut
sub deliver ($) {

  my $branch = cmd( command => "git symbolic-ref --short HEAD",
    verbose => $options{verbose} );

  chomp($branch);

  if ($branch  =~ /^delivered/ || $branch == get_default_branch() ){
    print "Come on! - You can't deliver this branch!\n";
  }

  my $issue = issue_no_from_branch();

  cmd( command => "git phlow sync",
    verbose => $options{verbose} );

  if(defined($options{local})){
    cmd( command => "git checkout ".get_default_branch(),
      verbose => $options{verbose} );
    cmd( command => "git phlow sync",
      verbose => $options{verbose} );
    cmd( command => "git merge $branch",
      verbose => $options{verbose} );
    cmd( command => "git push",
      verbose => $options{verbose} );

  } else {

    cmd( command => "git push ".remote()." $branch:ready/$branch",
      verbose => $options{verbose} );

  }

  cmd( command => "git branch -m $branch delivered/$branch",
    verbose => $options{verbose} );

  cmd( command => "git issue --nowip ".$issue,
    verbose => $options{verbose} );

}

=head2 wrapup

   git phlow wrapup [[--force] message]]

=over

=item C<< B<--force> >>

When force is used on the message, the message will replace, the otherwice automatically generated commit message.

=item C<< B<message> >>

The message will be ammended the automatically generated commit message, except when `--force` is used, then it will replace it.

=back

Performs an `addremove` (`git add -A .) and commits, using a commit message that includes the keyword `close #<issue>` where issue is in reference to the currently checked out branch.

B<Examples>

On a branch named `52-implement-wrapup`

The following commit messages will be generated

=over

=item C<git phlow wrapup>

  Close #52 implement wrapup

=item C<git phlow wrapup "Cool new feature">

  Close #52 implement wrapup

  Cool new feature

=item C<git phlow wrapup --force "Cool new feature">

  Close 52 Cool new feature

=cut
sub wrapup ($){

  keyword_commit("close");

}

sub share($){
  my $branch = cmd( command => "git symbolic-ref --short HEAD",
    verbose => $options{verbose} );
  keyword_commit("share"),
  chomp($branch);
  my $force = (defined($options{force}))? ' --force ' : '';
  my $move =  (defined($options{force}))? ' -M ' : '-m';
  cmd( command => "git branch $move $branch shared/$branch",
    verbose => $options{verbose} );
  cmd( command => "git push ".remote().$force." shared/$branch --set-upstream",
      verbose => $options{verbose} );
  print "Renamed and pushed shared/$branch\n";
  cmd( command => "git checkout ".get_default_branch(),
    verbose => $options{verbose});

}

=head2 issue

Deals with GitHub issues.

  phlow issue [--number]
  phlow issue [--branch] number
  phlow issue [--[no]wip] number

=over

=item C<< B<number> >>

The issue number in reference

=item C<< B<--number> >>

Returns the issue number, derived from the current branch name

=item C<< B<--branch> >>

Returns the branch name based on the issue

=item C<< B<--[no]wip> >>

Marks or unmarks the issue as Work In Progress

=back

=cut
sub issue ($) {


  my $issue = shift;
  croak 'I want an integer!' unless ($issue =~ /^\d+$/ || defined($options{number}));
  croak "There's only room for one argument" if defined(shift);
  defined($options{wip}) ||
  defined($options{number}) ||
  defined($options{branch}) ||
  pod2usage(
    -verbose => 99,
    -exitval => 1,
    -sections => [ "COMMANDS/".$Phlowcommand ]);

  my $done  = 0;
  if(defined($options{wip}) && not $done){
    if ($options{wip}){
       cmd(
        command => "ghi assign $issue",
        verbose => $options{verbose} );
      cmd(
        command => "ghi label $issue 'Status - in progress'",
        verbose => $options{verbose} );
      cmd(
        command => "ghi open $issue",
        verbose => $options{verbose},
        system  => 1 );
    } else {
      print cmd(
        command => "ghi label $issue -d 'Status - in progress'",
        verbose => $options{verbose},
        die_on_err => 0 );
    }
    $done = 1;
  }

  if(defined($options{number}) && not $done){
    print issue_no_from_branch()."\n";
    $done =1;
  }

  if (defined($options{branch})){
    print issue_branch_name($issue)."\n";
    $done = 1;
  }

}

######## Non exposed helper functions

sub validate_context() {
	unless (defined $valid_commands{$Phlowcommand}){
		print STDERR "$Phlowcommand is not a legal command\n";
		pod2usage(-exitval => 1, -verbose => 1)
	};
  defined $options{usage} && pod2usage(
   -verbose => 99,
   -exitval => 1,
   -sections => [ "COMMANDS/".$Phlowcommand ]
  );
  defined( $options{verbose} ) ||  do {$options{verbose} = 0};
  $options{verbose} && print "Phlow $Phlowcommand\n";
};

sub hubname() {
  my $remoteurl = cmd(
    command => 'git config --get remote.'.remote().'.url',
    verbose => $options{verbose} );
  my ($srv, $hubname) = split /:/, $remoteurl;
  $hubname =~ s@//github.com/@@g;
  $hubname =~ s/.git$//g;
  chomp($hubname);
  return $hubname;
}

sub gettoken() {
  my $token = cmd(
    command => 'git config --global --get ghi.token',
    verbose => $options{verbose});
  chomp($token);
  if ($token =~ s/^!//){
    $token = cmd(
      command => $token,
      verbose => $options{verbose});
  };
  chomp($token);
  return $token;
}

sub cmd($) {
  my %opt = @_;
  croak "input parameter for key 'command' required" unless ( $opt{command} );
  defined( $opt{die_on_err} )   ||  do {$opt{die_on_err}   = 1};
  defined( $opt{system} )       ||  do {$opt{system}       = 0};
	defined( $opt{merge_errout} ) ||  do {$opt{merge_errout} = 1};
	defined( $opt{verbose} )      ||  do {$opt{verbose}      = 0};
	defined( $opt{return_array} ) ||  do {$opt{return_array} = 0};
  my $cmd = ($opt{merge_errout})? $opt{command} . ' 2>&1' : $opt{command};
	$opt{verbose} && print $opt{command}."\n";
  my @res;
  if ($opt{system}){
    system($cmd);
  } else {
    @res= qx($cmd);
  };
  # Report errors unless we expect the call to generate non-zero exit value
  unless ( not $opt{die_on_err} ) {
    if ($?) {
      croak "Execution of [$cmd] returned a non-zero value (".( ($?) / 256).")";
    }
  };
  return ( $opt{return_array} ) ? @res : join( '', @res );
}

sub issue_branch_name($) {
  my $issue = shift;
  croak 'I want an integer!' unless ($issue =~ /^\d+$/);
  croak "There's only room for one argument" if defined(shift);
  my $api = 'https://api.github.com/repos/'.hubname().'/issues/'.$issue;
  my $json = ghapi( uri => $api);
  my $branchname = $json->{title};
  if (defined $branchname){
    $branchname =~ s/[\!\.\"\£\$€\%\&\?\*\@\:\;\\\/\[\]\,\:\'\+]//g;
    $branchname = "$issue-".$branchname;
    $branchname =~ s/[ _]/-/g;
    while ($branchname =~ s/--/-/g){};
    $branchname =~ s/-$//g;
  }
  return lc($branchname);
};

sub ghapi($) {
  my %opt = @_;
  croak "'uri' is required" unless defined($opt{uri});
  my $cmd = 'curl -s -u :'.gettoken().' '.$opt{uri};
  my $raw_json = &cmd( command => $cmd, verbose => $options{verbose});
  return JSON::PP->new->utf8->relaxed([1])->decode($raw_json);
};

sub remote_from_branch() {
  my $retval;
  my $branch = &cmd( command => "git symbolic-ref --short HEAD",
    verbose => $options{verbose});
  if ( $branch =~ /^(\d+)/ || $branch =~ /^shared\/(\d+)/ || $branch =~ /^delivered\/(\d+)/){
    $retval = $1;
  };
  return $retval;
};

sub local_branch() {
  my $local_branch = &cmd(
    command => "git rev-parse --symbolic-full-name --abbrev-ref HEAD",
    verbose => $options{verbose} );
  chomp($local_branch);
  return $local_branch;
}

sub remote(){
  my $retval;
  my $remote = &cmd(
    command => "git config branch.".local_branch().".remote",
    verbose => $options{verbose},
    die_on_err => 0 );
  if (@?){
    &cmd(
      command => "git config branch.".get_default_branch().".remote",
      verbose => $options{verbose},
      die_on_err => 0 );
  }
  chomp($remote);
  return $remote;
}


sub fetch ($){
  my %opt = @_;
  defined( $opt{die_on_err} )   ||  do {$opt{die_on_err}   = 1};
  defined( $opt{purge} )        ||  do {$opt{purge}        = 0};
  defined( $opt{prune} )        ||  do {$opt{prune}        = 1};
  defined( $opt{local} )        ||  do {$opt{local}        = 0};
  defined( $opt{remote} )       ||  do {$opt{remote}       = 0};
  defined( $opt{prefix} )       ||  do {$opt{prefix}       = ['delivered'] };
  defined( $opt{dry} )       ||  do {$opt{dry}       = 0 };


  my $remote = remote();
  my $prune = ($opt{prune})? ' --prune ' : '';
  &cmd( command => "git fetch $remote $prune",
    verbose => $options{verbose},
    die_on_err => $opt{die_on_err} );

  if($opt{purge}){
    my $integration_branch = "$remote/".get_default_branch();
    my %branchmap;

    if($opt{local}){
      my @branches = &cmd( command => "git branch --merged $integration_branch",
        verbose => $options{verbose},
        die_on_err => 0,
        return_array => 1);

      foreach my $b (@branches){
        $b =~ s/^\s*//;
        chomp($b);
        foreach my $prefix (@{$opt{prefix}}){
          if($b =~ /^$prefix/){
            $branchmap{$b} = "git branch -d $b";
          };
        }
      }
    }


    if ($opt{remote}){
      my @remote_branches = &cmd( command => "git branch -r --merged $integration_branch",
        verbose => $options{verbose},
        die_on_err => 0,
        return_array => 1);

      foreach my $b (@remote_branches){
        $b =~ s/^\s*//;
        chomp($b);
        foreach my $prefix (@{$opt{prefix}}){
          if($b =~ /^$prefix/){
            $b =~ s/^$remote\///;
            $branchmap{$b} = "git push $remote :$b";
          };
        }
      }
    }

    foreach (sort keys %branchmap){
      my $cmd = "$branchmap{$_}";
      if ($opt{dry}){
        print $cmd."\n";
      } else {
        print &cmd( command => $cmd,
          verbose => $options{verbose},
          die_on_err => 0);
      }
    }
  }








}

sub issue_no_from_branch() {
  my $retval;
  my $branch = &cmd( command => "git symbolic-ref --short HEAD",
    verbose => $options{verbose});
  if ( $branch =~ /^(\d+)/ || $branch =~ /^shared\/(\d+)/ || $branch =~ /^delivered\/(\d+)/){
    $retval = $1;
  };
  return $retval;
};

sub get_default_branch() {
  my $cmd = 'curl -s -u :'.gettoken()
    .' https://api.github.com/repos/'.hubname();
  my $raw_json = &cmd(
    command => $cmd,
    verbose => $options{verbose});
  my $json = JSON::PP->new->utf8->relaxed([1])->decode($raw_json);
  return $json->{default_branch};

  my $keyword = shift;
  croak "Expected 'close' or 'share'" unless (lc($keyword) =~ /close|share/);

  $keyword = ucfirst(lc($keyword));

  my $arg = shift @ARGV;
  my $message;

  if (defined($arg) && defined($options{force})){
    my $issue = issue_no_from_branch();
    $message = "$keyword #$issue ".$arg;
  } else {
    my $branch = &cmd (
      command => "git symbolic-ref --short HEAD",
      verbose => $options{vebose} );
    chomp($branch);
    $branch =~ s/-/ /g;
    $message = "$keyword #".$branch;

    if (defined($arg)){
      $message = $message."\n\n".$arg;
    }

  }

  &cmd(
   command => "git add -A .",
   verbose => $options{verbose} );

  &cmd(
    command => 'git commit -m "'.$message.'"',
    verbose => $options{verbose},
    die_on_err => 0 );

}

sub keyword_commit() {
 my $keyword = shift;
 croak "Expected 'close' or 'share'" unless (lc($keyword) =~ /close|share/);

 $keyword = ucfirst(lc($keyword));

 my $arg = shift @ARGV;
 my $message;

 if (defined($arg) && defined($options{force})){
   my $issue = issue_no_from_branch();
   $message = "$keyword #$issue ".$arg;
 } else {
   my $branch = &cmd (
     command => "git symbolic-ref --short HEAD",
     verbose => $options{vebose} );
   chomp($branch);
   $branch =~ s/-/ /g;
   $message = "$keyword #".$branch;

   if (defined($arg)){
     $message = $message."\n\n".$arg;
   }

 }

 &cmd(
  command => "git add -A .",
  verbose => $options{verbose} );

 &cmd(
   command => 'git commit -m "'.$message.'"',
   verbose => $options{verbose} );

}

__END__
